intestinal.ept.featureplot <- plot_grid(vil1, fabp2, apoa1a, lgals2b, fabp1b.1, rbp2a, chia.2 , ncol = 2, nrow = 5 )
plot_grid(title.featureplot, intestinal.ept.featureplot, ncol = 1, rel_heights = c(0.1,1))
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle(label = "vil1")
vil1
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle(label = "vil1") + labs(title = "vil1")
vil1
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle(subtitle  = "vil1")
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle(subtitle  = "vil1", label = "vil1")
vil1
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle(subtitle  = "vil1", label = "vil1") + theme(plot.title = element_text(vjust = 1))
vil1
vil1 <- FeaturePlot(cv.gf.integrated, features = "ENSDARG00000040466", label = TRUE, split.by = "treatment")+ ggtitle( label = "vil1") + theme(plot.title = element_text(vjust = 1))
vil1
title.featureplot <- ggdraw() + draw_label("Intestinal Epithelial Marker Genes", fontface = "bold")
intestinal.ept.featureplot <- plot_grid(vil1, fabp2, apoa1a, lgals2b, fabp1b.1, rbp2a, chia.2 , ncol = 2, nrow = 5 )
plot_grid(title.featureplot, intestinal.ept.featureplot, ncol = 1, rel_heights = c(0.1,1))
save.image("/gpfs/home/ntran2/bgmp/scRNAseq_hostmicrobe/scRNAseq_hostmicrobe/CVvGF/with_anchors/CVvGF_with_achors.RData")
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 120),
message = FALSE,
warning = FALSE
)
#library(dplyr)
library(Seurat)
# Load the pre treatment dataset
pre.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/pre/filtered_feature_bc_matrix/")
# Load the pre treatment dataset
AR.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/AR/filtered_feature_bc_matrix/")
# Initialize the Seurat object with the raw (non-normalized data) for each dataset
pre <- CreateSeuratObject(counts = pre.data, project = "pre", min.cells = 0, min.features = 0)
pre
AR <- CreateSeuratObject(counts = AR.data, project = "AR", min.cells = 0, min.features = 0)
AR
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 120),
message = FALSE,
warning = FALSE
)
#library(dplyr)
library(Seurat)
# Load the pre treatment dataset
pre.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/pre/filtered_feature_bc_matrix/")
# Load the pre treatment dataset
AR.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/AR/filtered_feature_bc_matrix/")
# Initialize the Seurat object with the raw (non-normalized data) for each dataset
pre <- CreateSeuratObject(counts = pre.data, project = "pre", min.cells = 0, min.features = 0)
pre
AR <- CreateSeuratObject(counts = AR.data, project = "AR", min.cells = 0, min.features = 0)
AR
# Lets examine a few genes in the first thirty cells
pre.data[c("STMN1","CD74","MS4A1"), 1:30]
AR.data[c("STMN1","CD74","MS4A1"), 1:30]
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pre[["percent.mt"]] <- PercentageFeatureSet(object = pre, pattern = "^MT-")
AR[["percent.mt"]] <- PercentageFeatureSet(object = AR, pattern = "^MT-")
# Note that the above commands require mitochondrial protein coding gene names to start with "MT".
# If you work on a different species, or don't use gene names, the pattern above will need to be changed.
#Visualize QC metrics as a violin plot
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1,plot2))
pre <- subset(x = pre, subset = nFeature_RNA > ??? & nFeature_RNA < ??? & percent.mt < ???)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pre[["percent.mt"]] <- PercentageFeatureSet(object = pre, pattern = "^MT-")
AR[["percent.mt"]] <- PercentageFeatureSet(object = AR, pattern = "^MT-")
# Note that the above commands require mitochondrial protein coding gene names to start with "MT".
# If you work on a different species, or don't use gene names, the pattern above will need to be changed.
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
head(x = pre@meta.data, 5)
head(x = AR@meta.data, 5)
CombinePlots(plots = list(plot1,plot2))
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 17)
pre
VlnPlot(object = AR, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 5)
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 3000 & percent.mt < 5)
AR <- subset(x = AR, subset = nFeature_RNA > 500 & nFeature_RNA < 2200 & percent.mt < 5)
VlnPlot(object = AR, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 1000 & percent.mt < 5)
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA > 3000 & percent.mt < 5)
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 3000 & percent.mt < 5)
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pre
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 5)
pre
#Visualize QC metrics as a violin plot
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1,plot2))
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 5)
pre
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 17)
pre
#Visualize QC metrics as a violin plot
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1,plot2))
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 17)
pre
pre
VlnPlot(object = AR, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
AR
# Merge the datasets before normalization
combined <- merge(pre, y = AR, add.cell.ids = c("pre", "AR"), project = "Paulson_Combined")
combined
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 120),
message = FALSE,
warning = FALSE
)
#library(dplyr)
library(Seurat)
# Load the pre treatment dataset
pre.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/pre/filtered_feature_bc_matrix/")
# Load the pre treatment dataset
AR.data <- Read10X(data.dir = "/projects/bgmp/shared/2019_Paulson_scRNA/AR/filtered_feature_bc_matrix/")
# Initialize the Seurat object with the raw (non-normalized data) for each dataset
pre <- CreateSeuratObject(counts = pre.data, project = "pre", min.cells = 0, min.features = 0)
pre
AR <- CreateSeuratObject(counts = AR.data, project = "AR", min.cells = 0, min.features = 0)
AR
# Lets examine a few genes in the first thirty cells
pre.data[c("STMN1","CD74","MS4A1"), 1:30]
AR.data[c("STMN1","CD74","MS4A1"), 1:30]
dense.size <- object.size(x = as.matrix(x = pre.data))
dense.size
sparse.size <- object.size(x = pre.data)
sparse.size
dense.size / sparse.size
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pre[["percent.mt"]] <- PercentageFeatureSet(object = pre, pattern = "^MT-")
AR[["percent.mt"]] <- PercentageFeatureSet(object = AR, pattern = "^MT-")
# Note that the above commands require mitochondrial protein coding gene names to start with "MT".
# If you work on a different species, or don't use gene names, the pattern above will need to be changed.
# Show QC metrics for the first 5 cells
head(x = pre@meta.data, 5)
head(x = AR@meta.data, 5)
VlnPlot(object = pre, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(object = pre, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pre <- subset(x = pre, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 17)
pre
VlnPlot(object = AR, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
AR <- subset(x = AR, subset = nFeature_RNA > 500 & nFeature_RNA < 3000 & percent.mt < 22)
AR
# Merge the datasets before normalization
combined <- merge(pre, y = AR, add.cell.ids = c("pre", "AR"), project = "Paulson_Combined")
combined
combined <- NormalizeData(object = combined, normalization.method = "LogNormalize", scale.factor = 1e4)
combined <- NormalizeData(object = combined)
combined <- FindVariableFeatures(object = combined, selection.method = 'vst', nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(x = VariableFeatures(object = combined), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(object = combined)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
all.genes <- rownames(x = combined)
combined <- ScaleData(object = combined, features = all.genes)
combined <- ScaleData(object = combined)
combined <- ScaleData(object = combined, vars.to.regress = c('nCount_RNA', 'percent.mt'))
combined <- RunPCA(object = combined, features = VariableFeatures(object = combined), npcs = 100)
# Examine and visualize PCA results a few different ways
print(x = combined[['pca']], dims = 1:5, nfeatures = 5)
VizDimLoadings(object = combined, dims = 1:2, reduction = 'pca')
DimPlot(object = combined, reduction = 'pca')
DimHeatmap(object = combined, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(object = combined, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(object = combined, ndims = 50)
DimHeatmap(object = combined, dims = 16:30, cells = 500, balanced = TRUE)
combined <- FindNeighbors(object = combined, dims = 1:30)
combined <- FindClusters(object = combined, resolution = 30)
combined <- FindClusters(object = combined, resolution = 3)
combined <- FindClusters(object = combined, resolution = 1)
combined <- FindClusters(object = combined, resolution = 2)
combined <- FindClusters(object = combined, resolution = 5)
combined <- FindClusters(object = combined, resolution = 3)
combined <- FindClusters(object = combined, resolution = 1.2)
combined <- FindClusters(object = combined, resolution = 3)
combined <- RunUMAP(object = combined, dims = 1:30)
DimPlot(object = combined, reduction = 'umap')
DimPlot(object = combined, reduction = 'umap', group.by = "orig.ident")
DimPlot(object = combined, reduction = 'umap', label = TRUE)
combined <- FindNeighbors(object = combined, dims = 1:15)
combined <- FindClusters(object = combined, resolution = 1.2)
# Look at cluster IDs of the first 5 cells
head(x = Idents(object = combined), 5)
tail(x = Idents(object = combined), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages = "umap-learn")
combined <- RunUMAP(object = combined, dims = 1:15)
# note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters
DimPlot(object = combined, reduction = 'umap', label = TRUE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters
DimPlot(object = combined, reduction = 'umap', group.by = "orig.ident")
combined.markers <- FindAllMarkers(object = combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(combined.markers)
cluster1.markers <- FindMarkers(object = combined, ident.1 = 0, min.pct = 0.25)
head(x = cluster0.markers, n = 5)
cluster0.markers <- FindMarkers(object = combined, ident.1 = 0, min.pct = 0.25)
head(x = cluster0.markers, n = 5)
cluster0.markers <- FindMarkers(object = combined, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster1.markers)
VlnPlot(object = combined, features = c("CHGA", "STMN1","CD74"))
VlnPlot(object = combined, features = c("CHGA", "STMN1","CD74"), slot = 'counts', log = TRUE)
cluster0.markers <- FindMarkers(object = combined, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster0.markers)
head(cluster0.markers)
View(cluster0.markers)
#Add sample_cluster as metadata and set ident
test <- data.frame(combined@meta.data$orig.ident,combined@meta.data$seurat_clusters)
temp <- data.frame(sample_cluster = paste(test$combined.meta.data.orig.ident,test$combined.meta.data.seurat_clusters,sep = "_"), row.names=rownames(combined@meta.data))
head(temp)
tail(temp)
combined <- AddMetaData(object = combined, metadata = temp, col.name = "sample_cluster")
combined <- SetIdent(object = combined, value = "sample_cluster")
cluster0.pre_vs_AR <- FindMarkers(object = combined, ident.1 = "pre_0", ident.2 = "AR_0", min.pct = 0.25)
head(x = cluster0.pre_vs_AR , n = 5)
cluster0.pre_vs_AR <- FindMarkers(object = combined, ident.1 = "pre_0", ident.2 = "AR_6", min.pct = 0.25)
head(x = cluster0.pre_vs_AR , n = 5)
View(test)
View(test)
View(temp)
cluster0.pre_vs_AR <- FindMarkers(object = combined, ident.1 = "pre_0", ident.2 = "AR_0", min.pct = 0.25)
head(x = cluster0.pre_vs_AR , n = 5)
library(gridExtra)
library(future)
options(future.globals.maxSize = 5000 * 1024^2)
plan("mutliprocess")
plan("multiprocess")
View(combined.markers)
library(dplyr)
top10 <- combined.markers%>% group_by(cluster) %>% top_n(n=5, wt = avg_logFC)
FeaturePlot(object = combined, features = top10$gene)
load("/gpfs/home/ntran2/bgmp/scRNAseq_hostmicrobe/scRNAseq_hostmicrobe/CVvGF/with_anchors/CVvGF_with_achors.RData")
#install.packages("Seurat")
library(Seurat)
library(plotly)
#install.packages("future")
library(future)
library(dplyr)
library(ggplot2)
library(cowplot)
library(gridExtra)
options(future.globals.maxSize = 5000 * 1024^2)
# we want to know markers distinguishing clusters 25 from 33 because they BOTH are highly expressive in intestinal ept. genes
cluster25.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = "25", ident.2 = "33", verbose = TRUE, logfc.threshold = .25, min.pct = .25)
plan("multiprocess")
cluster25.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = "25", ident.2 = "33", verbose = TRUE, logfc.threshold = .25, min.pct = .25)
cluster25.intest.ep.subset <- merge(AllMarkers, gene_table, by = "gene")
View(cluster25.intest.ep.subset)
plan("multiprocess")
cluster25.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = 25, ident.2 = 33, verbose = TRUE, logfc.threshold = .25, min.pct = .25)
cluster25.intest.ep.subset <- merge(cluster25.intest.ep.subset, gene_table, by = "gene")
View(cluster25.intest.ep.subset)
cluster25.intest.ep.subset$gene_ID <- rownames(cluster25.intest.ep.subset)
cluster25.intest.ep.subset <- merge(cluster25.intest.ep.subset, gene_table, by = "gene")
cluster25.intest.ep.subset$gene <- rownames(cluster25.intest.ep.subset)
cluster25.intest.ep.subset <- merge(cluster25.intest.ep.subset, gene_table, by = "gene")
View(cluster25.intest.ep.subset)
# we want to know markers distinguishing clusters 25 from 33 because they BOTH are highly expressive in intestinal ept. genes
plan("multiprocess")
cluster25.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = 25, ident.2 = 33, verbose = TRUE, logfc.threshold = .25, min.pct = .25)
cluster25.intest.ep.subset$gene <- rownames(cluster25.intest.ep.subset)
cluster25.intest.ep.subset <- merge(cluster25.intest.ep.subset, gene_table, by = "gene")
View(cluster25.intest.ep.subset)
cluster25.intest.ep.subset.CM <- FindConservedMarkers(cv.gf.integrated, ident.1 = 25, grouping.var = "treatment", verbose  = TRUE)
View(cluster25.intest.ep.subset.CM)
conserved.cluster25.intest.ep.subset <- FindConservedMarkers(cv.gf.integrated, ident.1 = 25, grouping.var = "treatment", verbose  = TRUE)
conserved.cluster25.intest.ep.subset <- FindConservedMarkers(cv.gf.integrated, ident.1 = 25, ident.2 = 33, grouping.var = "treatment", verbose  = TRUE)
conserved.cluster25.intest.ep.subset$gene <- rownames(conserved.cluster25.intest.ep.subset)
conserved.cluster25.intest.ep.subset <- merge(conserved.cluster25.intest.ep.subset, gene_table, by = "gene")
View(conserved.cluster25.intest.ep.subset)
head(cluster25.intest.ep.subset, n = 10)
head(conserved.cluster25.intest.ep.subset, n = 10)
cluster33.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = 33, ident.2 = 25, verbose = TRUE, logfc.threshold = .25, min.pct = .25)
plan("multiprocess")
cluster33.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = 33, ident.2 = 25, verbose = TRUE, logfc.threshold = .25, min.pct = .25)
cluster33.intest.ep.subset$gene <- rownames(cluster33.intest.ep.subset)
cluster33.intest.ep.subset <- merge(cluster33.intest.ep.subset, gene_table, by = "gene")
head(cluster33.intest.ep.subset, n = 10)
View(cluster33.intest.ep.subset)
conserved.cluster33.intest.ep.subset <- FindConservedMarkers(cv.gf.integrated, ident.1 = 33, ident.2 = 25, grouping.var = "treatment", verbose  = TRUE)
conserved.cluster33.intest.ep.subset$gene <- rownames(conserved.cluster33.intest.ep.subset)
conserved.cluster33.intest.ep.subset <- merge(conserved.cluster33.intest.ep.subset, gene_table, by = "gene")
head(conserved.cluster33.intest.ep.subset, n = 10)
View(conserved.cluster33.intest.ep.subset)
View(adj.AllMarkers)
View(adj.AllMarkers)
group.by.trt.cluster25 <- FindMarkers(cv.gf.integrated, ident.1 = 25, ident.2 = 33, verbose = TRUE, logfc.threshold = .25, min.pct = .25, group.by = "treatment")
group.by.trt.cluster25 <- FindMarkers(cv.gf.integrated, ident.1 = 25, verbose = TRUE, logfc.threshold = .25, min.pct = .25, group.by = "treatment")
cluster25.intest.ep.subset <- FindMarkers(cv.gf.integrated, ident.1 = 25, ident.2 = 33, verbose = TRUE, logfc.threshold = .25, min.pct = .25)
group.by.trt.cluster25 <- FindMarkers(cv.gf.integrated, ident.1 = "25", verbose = TRUE, logfc.threshold = .25, min.pct = .25, group.by = "treatment")
group.by.trt.cluster25 <- FindMarkers(cv.gf.integrated, ident.1 = "cv", ident.2 = 25, verbose = TRUE, logfc.threshold = .25, min.pct = .25, group.by = "treatment")
theme_set(theme_cowplot())
print(intestinal.ept.subset)
cluster25.subset <- subset(cv.gf.integrated, idents = 25)
colnames(cluster25.subset)
names(cluster25.subset)
table(cv.gf.integrated$treatment)
table(Idents(cv.gf.integrated), cv.gf.integrated$treatment)
Idents(cluster25.subset) <- "treatment"
avg.cluster25 <- log1p(AverageExpression(cluster25.subset, verbose = TRUE)$RNA)
avg.cluster25$gene <- rownames(avg.cluster25)
View(avg.cluster25)
avg.cluster25 <- merge(avg.cluster25, gene_table, by = "gene")
DotPlot(intestinal.ept.subset, features = rev(markers.to.plot), cols = c("blue", "red"), dot.scale = 20, split.by = "treatment") + RotatedAxis() + scale_x_discrete(labels= c("vil1", "fabp2", "apoa1a", "lgals2b", "fabp1b.1
", "rbp2a", "chia.2"))
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes")
cry.plot.1
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
genes.to.label = c("crygm2d2", "cryba1l1", "cryba4", "crygn2", "crygm2d1", "crygm2d12", "cryba2b", "crygm2d10", "crygm2d13")
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
genes.to.label = c("ENSDARG00000086917", "cryba1l1", "cryba4", "crygn2", "crygm2d1", "crygm2d12", "cryba2b", "crygm2d10", "crygm2d13")
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
genes.to.label = c("ENSDARG00000086917", "ENSDARG00000032929")
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes")
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
theme_set(theme_cowplot())
cluster25.subset <- subset(cv.gf.integrated, idents = 25)
Idents(cluster25.subset) <- "treatment"
avg.cluster25 <- log1p(AverageExpression(cluster25.subset, verbose = TRUE)$RNA)
#avg.cluster25$gene <- rownames(avg.cluster25)
#avg.cluster25 <- merge(avg.cluster25, gene_table, by = "gene")
genes.to.label = c("ENSDARG00000086917", "ENSDARG00000032929")
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes")
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
View(avg.cluster25)
cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
cry.plot.1
theme_set(theme_cowplot())
cluster25.subset <- subset(cv.gf.integrated, idents = 25)
Idents(cluster25.subset) <- "treatment"
avg.cluster25 <- log1p(AverageExpression(cluster25.subset, verbose = TRUE)$RNA)
avg.cluster25$gene <- rownames(avg.cluster25)
avg.cluster25 <- merge(avg.cluster25, gene_table, by = "gene")
genes.to.label = c("crygm2d2", "cryba1l1", "cryba4", "crygn2", "crygm2d1", "crygm2d12", "cryba2b", "crygm2d10", "crygm2d13")
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes")
#cry.plot.1 <- LabelPoints(plot = cry.plot.1, points = genes.to.label, repel = TRUE)
cry.plot.1 <- LabelPoints(plot = cry.plot.1, labels = genes.to.label, repel = TRUE)
cry.plot.1 <- LabelPoints(plot = cry.plot.1, labels = c("crygm2d2", "cryba1l1", "cryba4", "crygn2", "crygm2d1", "crygm2d12", "cryba2b", "crygm2d10", "crygm2d13"), repel = TRUE)
library(ggrepel)
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes") +
geom_label_repel(data         = subset(avg.cluster25, gene_NAME == "crygm2d2"),
nudge_y       = 16 - subset(avg.cluster25, gene_NAME == "crygm2d2")$gene_NAME,
size          = 4,
box.padding   = 0.5,
point.padding = 0.5,
force         = 100,
segment.size  = 0.2,
segment.color = "grey50",
direction     = "x")
cry.plot.1
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf, label = gene_NAME)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes") +
geom_label_repel(data         = subset(avg.cluster25, gene_NAME == "crygm2d2"),
nudge_y       = 16 - subset(avg.cluster25, gene_NAME == "crygm2d2")$gene_NAME,
size          = 4,
box.padding   = 0.5,
point.padding = 0.5,
force         = 100,
segment.size  = 0.2,
segment.color = "grey50",
direction     = "x")
cry.plot.1
cry.plot.1 <- ggplot(avg.cluster25, aes(cv, gf, label = gene_NAME)) + geom_point() + ggtitle("Cluster 25: Differential Gene Expression on Crystallin Genes") +
geom_label_repel(data         = subset(avg.cluster25, cv < 3),
nudge_y       = 16 - subset(avg.cluster25, cv <3)$cv,
size          = 4,
box.padding   = 0.5,
point.padding = 0.5,
force         = 100,
segment.size  = 0.2,
segment.color = "grey50",
direction     = "x")
cry.plot.1
save.image("/gpfs/projects/bgmp/ntran2/scRNAseq_hostmicrobe/scRNAseq_hostmicrobe/CVvGF/with_anchors/CVvGF_with_achors.RData")
obj_integrated <- readRDS("../data/homeo_samples_integ.RDS")
library(Seurat)
library(future)
library(dplyr)
library(ggplot2)
library(cowplot)
library(ggrepel)
options(future.globals.maxSize = 8000 * 1024^2)
if (TRUE) {
#setwd("/Volumes/easystore/SIMR_2019/pio-lab/scripts")
setwd("/home/ntran2/bgmp/pio-lab/scripts")
script_name <- "homeo_samples_integ"
figurePath <- function(filename, format){paste0(script_name, "_figures/", filename)}
}
adj_homeo_isl1_10X <- readRDS("../data/adj_homeo.isl1_sib_10X.RDS")
obj_integrated <- readRDS("../data/homeo_samples_integ.RDS")
library(stringr)
obj_integrated@meta.data$data.set <- factor(obj_integrated@meta.data$data.set, ordered = TRUE)
#rename homeo samples L##### to LIMS order number
meta_obj_integ <- obj_integrated@meta.data
data.set <- as.vector(obj_integrated@meta.data$data.set)
meta_obj_integ <- meta_obj_integ%>% mutate(data.set =case_when(str_detect(data.set, "homeo-L29314") ~ "homeo-2047",
str_detect(data.set, "homeo-L34727") ~ "homeo-2410-7",
str_detect(data.set, "homeo-L34728") ~ "homeo-2410-8",
TRUE ~ as.vector(obj_integrated@meta.data$data.set)))
obj_integrated@meta.data$data.set <- meta_obj_integ$data.set
for (pc in dim_list){
obj_integrated <- FindNeighbors(obj_integrated, dims = 1:pc, verbose = TRUE)
obj_integrated <- FindClusters(obj_integrated, resolution = 1.0, verbose = TRUE)
obj_integrated <- RunUMAP(obj_integrated, reduction = "pca", dims = 1:pc, verbose = TRUE)
png(figurePath(paste0("umap.by.dataset.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated, group.by  = "data.set") + DarkTheme())
dev.off()
png(figurePath(paste0("umap.unlabelled.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated))
dev.off()
integrated_featplt <- FeaturePlot(obj_integrated, common_features,
reduction = "umap", pt.size = 0.25, combine = FALSE, label = TRUE)
for (i in 1:length(integrated_featplt)) {
integrated_featplt[[i]] <- integrated_featplt[[i]] + NoLegend() + NoAxes()
}
png(figurePath(paste0("common_features.PC",pc,".png")), width = 40,
height = 80, units = "in", res = 200)
print(cowplot::plot_grid(plotlist = integrated_featplt, ncol = 4))
dev.off()
}
dim_list <- c(10,15,20,25,30)
common_features <- scan(paste0("../data/gene-lists/common_neuromast_features.txt"), what = "character")
if (!SC_transform) {
plan("multiprocess")
obj_integrated <- ScaleData(obj_integrated, verbose = TRUE, vars.to.regress = "nCount_RNA")
obj_integrated <- RunPCA(obj_integrated, npcs = 100, verbose = TRUE, features = NULL)
}
for (pc in dim_list){
obj_integrated <- FindNeighbors(obj_integrated, dims = 1:pc, verbose = TRUE)
obj_integrated <- FindClusters(obj_integrated, resolution = 1.0, verbose = TRUE)
obj_integrated <- RunUMAP(obj_integrated, reduction = "pca", dims = 1:pc, verbose = TRUE)
png(figurePath(paste0("umap.by.dataset.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated, group.by  = "data.set") + DarkTheme())
dev.off()
png(figurePath(paste0("umap.unlabelled.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated))
dev.off()
integrated_featplt <- FeaturePlot(obj_integrated, common_features,
reduction = "umap", pt.size = 0.25, combine = FALSE, label = TRUE)
for (i in 1:length(integrated_featplt)) {
integrated_featplt[[i]] <- integrated_featplt[[i]] + NoLegend() + NoAxes()
}
png(figurePath(paste0("common_features.PC",pc,".png")), width = 40,
height = 80, units = "in", res = 200)
print(cowplot::plot_grid(plotlist = integrated_featplt, ncol = 4))
dev.off()
}
library(RColorBrewer)
for (pc in dim_list){
obj_integrated <- FindNeighbors(obj_integrated, dims = 1:pc, verbose = TRUE)
obj_integrated <- FindClusters(obj_integrated, resolution = 1.0, verbose = TRUE)
obj_integrated <- RunUMAP(obj_integrated, reduction = "pca", dims = 1:pc, verbose = TRUE)
png(figurePath(paste0("umap.by.dataset.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated, group.by = "data.set", cols = brewer.pal(n = 4, name = "RdBu")) + DarkTheme())
dev.off()
png(figurePath(paste0("umap.unlabelled.PC",pc,".png"))
,width = 11, height = 9, units = "in", res = 300)
print(DimPlot(obj_integrated))
dev.off()
integrated_featplt <- FeaturePlot(obj_integrated, common_features,
reduction = "umap", pt.size = 0.25, combine = FALSE, label = TRUE)
for (i in 1:length(integrated_featplt)) {
integrated_featplt[[i]] <- integrated_featplt[[i]] + NoLegend() + NoAxes()
}
png(figurePath(paste0("common_features.PC",pc,".png")), width = 40,
height = 80, units = "in", res = 200)
print(cowplot::plot_grid(plotlist = integrated_featplt, ncol = 4))
dev.off()
}
table(obj_integrated$data.set)
obj_integrated <- readRDS("../data/homeo_samples_integ.RDS")
table(obj_integrated$data.set)
obj_integrated_fpkm <- readRDS("../data/adj_fpkm_1828_smartseq_integ.RDS")
table(obj_integrated_fpkm$data.set)
DefaultAssay(obj_integrated)
DefaultAssay(obj_integrated) <- "RNA"
DimPlot(obj_integrated)
DimPlot(obj_integrated, group.by = "data.set")
DefaultAssay(obj_integrated)
integrated_featplt <- FeaturePlot(obj_integrated, common_features,
reduction = "umap", pt.size = 0.25, combine = FALSE, label = TRUE)
for (i in 1:length(integrated_featplt)) {
integrated_featplt[[i]] <- integrated_featplt[[i]] + NoLegend() + NoAxes()
}
print(cowplot::plot_grid(plotlist = integrated_featplt, ncol = 4))
for (i in 1:length(integrated_featplt)) {
integrated_featplt[[i]] <- integrated_featplt[[i]] + NoLegend() + NoAxes()
}
png(figurePath(paste0("common_features.test.png")), width = 40,
height = 80, units = "in", res = 200)
print(cowplot::plot_grid(plotlist = integrated_featplt, ncol = 4))
dev.off()
